//check original source at: https://github.com/tazotodua/useful-php-scripts/
function get_remote_data($url, $post_paramtrs=false,           $extra_params=array('schemeless'=>'false','replace_src'=>false)) { $GLOBALS['rdgr']['schemeless'] = array_key_exists('schemeless', $extra_params) ? $extra_params['schemeless'] : false; $GLOBALS['rdgr']['return_array']= array_key_exists('return_array', $extra_params) ? $extra_params['return_array'] : false; $GLOBALS['rdgr']['replace_src'] = array_key_exists('replace_src', $extra_params) ? $extra_params['replace_src'] : false; $c = curl_init();curl_setopt($c, CURLOPT_URL, $url); curl_setopt($c, CURLOPT_RETURNTRANSFER, 1); if($post_paramtrs){ curl_setopt($c, CURLOPT_POST,TRUE); curl_setopt($c, CURLOPT_POSTFIELDS, (is_array($post_paramtrs)? http_build_query($post_paramtrs) : $post_paramtrs) ); } if (is_object(json_decode($post_paramtrs))){ curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json', 'Content-Length: '.strlen($post_paramtrs)) ); } curl_setopt($c, CURLOPT_SSL_VERIFYHOST,false); curl_setopt($c, CURLOPT_SSL_VERIFYPEER,false); curl_setopt($c, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows NT 6.1; rv:33.0) Gecko/20100101 Firefox/33.0"); curl_setopt($c, CURLOPT_COOKIE, 'CookieName1=Value;'); curl_setopt($c, CURLOPT_MAXREDIRS, 10); $follow_allowed= ( ini_get('open_basedir') || ini_get('safe_mode')) ? false:true; if ($follow_allowed){curl_setopt($c, CURLOPT_FOLLOWLOCATION, 1);} curl_setopt($c, CURLOPT_CONNECTTIMEOUT, 9); curl_setopt($c, CURLOPT_REFERER, $url); curl_setopt($c, CURLOPT_TIMEOUT, 60); curl_setopt($c, CURLOPT_AUTOREFERER, true); curl_setopt($c, CURLOPT_ENCODING, 'gzip,deflate'); $data=curl_exec($c); $status=curl_getinfo($c); curl_close($c); $GLOBALS['rdgr']['parsed_url'] = parse_url($status['url']); $GLOBALS['rdgr']['parsed_url']['base_link'] = $status['url']; $GLOBALS['rdgr']['parsed_url']['domain_X'] = $GLOBALS['rdgr']['parsed_url']['scheme'].'://'.$GLOBALS['rdgr']['parsed_url']['host']; $GLOBALS['rdgr']['parsed_url']['path_X'] = stripslashes(dirname($GLOBALS['rdgr']['parsed_url']['path']).'/'); $GLOBALS['rdgr']['ext_array'] = array( 'src' => array('audio','embed','iframe','img','input','script','source','track','video'), 'srcset'=> array('source'), 'data' => array('object'), 'href' => array('a','link','area'), 'action'=> array('form') ); $GLOBALS['rdgr']['all_protocols']= array('adc','afp','amqp','bacnet','bittorrent','bootp','camel','dict','dns','dsnp','dhcp','ed2k','empp','finger','ftp','gnutella','gopher','http','https','imap','irc','isup','javascript','ldap','mime','msnp','map','modbus','mosh','mqtt','nntp','ntp','ntcip','openadr','pop3','radius','rdp','rlogin','rsync','rtp','rtsp','ssh','sisnapi','sip','smtp','snmp','soap','smb','ssdp','stun','tup','telnet','tcap','tftp','upnp','webdav','xmpp'); $data= preg_replace_callback( '/<(((?!<).)*?)>/si', function($matches_A){ $returned = $matches_A[0]; $tagname = preg_match('/((.*?)(\s|$))/si', $matches_A[1], $n) ? $n[2] : ""; foreach($GLOBALS['rdgr']['ext_array'] as $key=>$value){ if(in_array($tagname,$value)){ preg_match('/ '.$key.'=(\'|\")/i', $returned, $n); if(!empty($n[1])){ $GLOBALS['rdgr']['aphostrope_type']= $n[1]; $returned = preg_replace_callback( '/( '.$key.'='.$GLOBALS['rdgr']['aphostrope_type'].')(.*?)('.$GLOBALS['rdgr']['aphostrope_type'].')/i', function($matches_B){ $full_link = $matches_B[2]; if($GLOBALS['rdgr']['replace_src'] ){ if(substr($full_link, 0,2) != '//'){ $replace_allowed=true; foreach($GLOBALS['rdgr']['all_protocols'] as $each_protocol){ if(substr($full_link, 0, strlen($each_protocol)+1) == $each_protocol.':'){ $replace_allowed=false; break; } } if($replace_allowed){ $full_link = $GLOBALS['rdgr']['parsed_url']['domain_X']. (str_replace('//','/', $GLOBALS['rdgr']['parsed_url']['path_X'].$full_link) ); } } } if($GLOBALS['rdgr']['schemeless']){ $matches_B[2]=str_replace( array('https://','http://'), '//', $full_link); } unset($matches_B[0]); $returned=''; foreach ($matches_B as $each){$returned .= $each; } return $returned; }, $returned ); } } } return $returned; }, $data ); if($status['http_code']==301 || $status['http_code']==302) { if (!$follow_allowed){ if(empty($redirURL)){if(!empty($status['redirect_url'])){$redirURL=$status['redirect_url'];}} if(empty($redirURL)){preg_match('/(Location:|URI:)(.*?)(\r|\n)/si', $data, $m); if (!empty($m[2])){ $redirURL=$m[2]; } } if(empty($redirURL)){preg_match('/moved\s\<a(.*?)href\=\"(.*?)\"(.*?)here\<\/a\>/si',$data,$m); if (!empty($m[1])){ $redirURL=$m[1]; } } if(!empty($redirURL)){$t=debug_backtrace(); return call_user_func( $t[0]["function"], trim($redirURL), $post_paramtrs);} } } elseif ( $status['http_code'] != 200 ) { $data = "ERRORCODE22 with $url<br/><br/>Last status codes:".json_encode($status)."<br/><br/>Last data got:$data";} return ( $GLOBALS['rdgr']['return_array'] ? array('data'=>$data,'info'=>$status) : $data); }
